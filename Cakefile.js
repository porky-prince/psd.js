// Generated by CoffeeScript 1.12.7
var Promise, UglifyJS, browserify, exec, fs, ref, spawn, util, writeFile;

throw new Error('These functions are temporarily unavailable.');

fs = require('fs');

browserify = require('browserify');

UglifyJS = require('uglify-js');

Promise = require('bluebird');

ref = require('child_process'), spawn = ref.spawn, exec = ref.exec;

util = require('util');

writeFile = function(dest, src) {
  return new Promise(function(resolve, reject) {
    return fs.writeFile(dest, src, function() {
      return fs.stat(dest, function(err, stats) {
        if (err != null) {
          return reject(err);
        }
        console.log("Wrote " + dest + " - " + (Math.round(stats.size / 1024)) + "KB");
        return resolve();
      });
    });
  });
};

task('compile', 'Compile with browserify for the web', function() {
  return browserify({
    noParse: ['fs']
  }).transform('coffeeify').require('./shims/png.coffee', {
    expose: './image_exports/png.coffee'
  }).require('./shims/init.coffee', {
    expose: './psd/init.coffee'
  }).require('./lib/psd.coffee', {
    expose: 'psd'
  }).bundle(function(err, src, map) {
    if (err != null) {
      return console.log(err);
    }
    return writeFile('./dist/psd.js', src).then(function() {
      var minSrc;
      minSrc = UglifyJS.minify('./dist/psd.js', {
        outSourceMap: 'psd.js.map',
        sourceRoot: '/'
      });
      writeFile('./dist/psd.min.js', minSrc.code);
      return minSrc;
    }).then(function(minSrc) {
      return writeFile('./dist/psd.js.map', minSrc.map);
    }).then(function() {
      return console.log('Finished!');
    });
  });
});

task('docs:generate', 'Generate documentation', function() {
  var npm;
  npm = spawn('npm', ['run-script', 'docs']);
  npm.stdout.pipe(process.stdout);
  return npm.stderr.pipe(process.stderr);
});

task('docs:deploy', 'Deploys updated documentation to GitHub Pages', function() {
  console.log('Switching to gh-pages');
  return exec('git checkout gh-pages', function(err) {
    if (err != null) {
      return console.log(err);
    }
    console.log('Checking out docs from master');
    return exec('git checkout master docs', function(err) {
      if (err != null) {
        return console.log(err);
      }
      console.log('Committing new documentation');
      return exec('git commit -a -m "Update documentation"', function(err) {
        if (err != null) {
          return console.log(err);
        }
        console.log('Pushing to GitHub...');
        return exec('git push origin gh-pages', function(err) {
          if (err != null) {
            return console.log(err);
          }
          console.log('Switching back to master');
          return exec('git checkout master', function(err) {
            if (err != null) {
              return console.log(err);
            }
            return console.log('Deployed!');
          });
        });
      });
    });
  });
});
